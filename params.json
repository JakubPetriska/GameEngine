{
  "name": "GameEngine",
  "tagline": "Simple game engine for Android written in Java",
  "body": "Simple game engine for Android written in Java.\r\nEngine currently supports Android 2.3 (API level 9) and up.\r\n\r\n![](https://jakubpetriska.github.io/GameEngine/images/showcase.png)\r\n\r\n![](https://jakubpetriska.github.io/GameEngine/images/sample.png)\r\n\r\nCreated as a bachelor's thesis at CTU in Prague.\r\n\r\n## Documentation\r\nComplete javadoc for engine's API can be seen [here](https://jakubpetriska.github.io/GameEngine/javadoc-0.4.1/index.html).\r\n\r\n\r\n## Coordinate system\r\nLeft-handed coordinate system with _z_ axis pointing forward, _y_ pointing up and _x_ to the right.\r\n\r\n\r\n## Tutorial\r\nIn this tutorial you will create a simple application showing only the engine content. Engine will display an object that player will be able to move using his finger.\r\n\r\nFor more examples and samples of working projects using the engine check out the _sample_ and _showcase_ project modules. These contain the sample and showcase applications respectively.\r\n\r\n\r\n### Project setup\r\nCreate new Android Studio project and either add the whole _engine_ and _android-adapter_ modules into your project, upon which module with your application will be dependent or build the engine's aar file and add it to your project.\r\n\r\nNow you must add the engine activity to the AndroidManifest.xml. In this tutorial you will add the activity as main application activity, however it does not have to be the main activity.\r\n\r\nTo add this activity, place the following code into <application> tag of your AndroidManifest.xml.\r\n\r\n    <activity android:name=\"com.jakubpetriska.gameengine.api.android.GameEngineActivity\">\r\n        <intent-filter>\r\n            <action android:name=\"android.intent.action.MAIN\" />\r\n            <category android:name=\"android.intent.category.LAUNCHER\" />\r\n        </intent-filter>\r\n    </activity>\r\n\r\n\r\n### Add scene\r\nTo be able to run the application a few configuration files are needed. All engine configuration files are located in the application's assets folder, specifically in _assets/gameengine_.\r\n\r\nFirst configuration file that needs to be created is _scenes.xml_ file that needs to be located on _assets/gameenigine/scenes.xml_. This file defines what scenes engine can display and which scene is default. In our application default scene will always be displayed as first.\r\n\r\nCreate this file with following content:\r\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\t<scenes\r\n\t\tdefaultSceneName=\"main_scene\">\r\n\t\t<scene\r\n\t\t\tname=\"main_scene\"\r\n\t\t\tsceneFilePath=\"scenes/main_scene.xml\"/>\r\n\t</scenes>\r\n\r\nContent of this file says that our engine has a single scene named _main_scene_ and it is a default scene. Now there is one more thing. Every scene needs to have it's definition file. This file defines what is in the scene when it is loaded. It can be placed anywhere in the _assets/gameengine_ folder and it's path needs to be specified in the _scenes.xml_ file for every scene using the _sceneFilePath_ attribute of _<scene>_ tag. Create the _assets/gameengine/scenes/main_scene.xml_ now.\r\n\r\nGame engine's scene consists of objects with components. Objects hold things such as transformation while components add functionality such as rendering a 3D object. Scripts are also components.\r\n\r\nIn our scene there will be a cube that user will be able to move with his finger. We will create an object on the initial position of our cube that will contain two components. First component will be Mesh component, responsible for rendering the cube and second component will be the script controlling it's movement. Let's start with the cube.\r\n\r\nCopy the following code into your _main_scene.xml_:\r\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\t<scene>\r\n\t\t<gameObjects>\r\n\t\t\t<gameObject>\r\n\t\t\t\t<transform>\r\n\t\t\t\t\t<position x=\"0\" y=\"0\" z=\"10\" />\r\n\t\t\t\t</transform>\r\n\t\t\t\t<components>\r\n\t\t\t\t\t<component type=\"mesh\">\r\n\t\t\t\t\t\t<params>\r\n\t\t\t\t\t\t\t<param name=\"meshPath\">cube</param>\r\n\t\t\t\t\t\t</params>\r\n\t\t\t\t\t</component>\r\n\t\t\t\t</components>\r\n\t\t\t</gameObject>\r\n\t\t</gameObjects>\r\n\t</scene>\r\n\r\nYou can see that _<scene>_ tag contains _<gameObjects>_ tag which contains all top level objects of this scene. In our scene there is only one object specified by _<gameObject>_ tag in our game objects collection. Our game object contains two other tags. These are _<transform>_, containing initial position of the object and _<components>_ which contains all object's components. We specify component's type and in the parameters we specify primitive that we want to render.\r\n\r\nProject can now be built so please go ahead and test it.\r\n\r\n\r\n### Control the cube\r\nApplication will use the touch input to move the cube. First we need to add new component that will control the cube and attach it to the cube's object. Create new java class and extend the _Component_ class from engine's API. Now head to your _main_scene.xml_ and add new component into the _<components>_ tag. Add a _type_ attribute to the new component and put in the full class name, with package, of your new component. In our example project this line looks like this:\r\n\r\n\t<component type=\"com.jakubpetriska.gameengine.samples.basic.CubeController\"/>\r\n\r\nIn order to access touch input in our component we need to use the _Application_ class from engine's API. This class acts as a container for objects that provide all the important functionality. Reference to the instance of _Application_ is stored in every _Component_ and it can be obtained with calling the _getApplication()_ method of _Component_. This is the _Component_ that we'll use for controlling our cube:\r\n\r\n\timport com.monolith.api.Component;\r\n\timport com.monolith.api.Time;\r\n\timport com.monolith.api.Touch;\r\n\timport java.util.List;\r\n\r\n\tpublic class CubeController extends Component {\r\n\r\n\t\tprivate static final float MOVEMENT_CONSTANT = 0.2f;\r\n\r\n\t\t// Save the last touch position to calculate position deltas\r\n\t\tprivate float mLastTouchX = -1;\r\n\t\tprivate float mLastTouchY = -1;\r\n\r\n\t\t@Override\r\n\t\tpublic void update() {\r\n\t\t\tTime time = getApplication().getTime();\r\n\t\t\tList<Touch> touches = getApplication().getTouchInput().getTouches();\r\n\t\t\tif (touches.size() > 0) {\r\n\t\t\t\t// For simplicity we will always use the first running gesture\r\n\t\t\t\tTouch touch = touches.get(0);\r\n\r\n\t\t\t\t// Deltas need to be negated to move into the direction of touch\r\n\t\t\t\tfloat touchXDelta = -(touch.getX() - mLastTouchX);\r\n\t\t\t\tfloat touchYDelta = -(touch.getY() - mLastTouchY);\r\n\r\n\t\t\t\tif (mLastTouchX != -1 && mLastTouchY != -1) {\r\n\t\t\t\t\tgetGameObject().transform.moveBy(\r\n\t\t\t\t\t\t\ttouchXDelta * time.getTimeDelta() * MOVEMENT_CONSTANT,\r\n\t\t\t\t\t\t\ttouchYDelta * time.getTimeDelta() * MOVEMENT_CONSTANT,\r\n\t\t\t\t\t\t\t0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (touch.getState() == Touch.STATE_ENDED) {\r\n\t\t\t\t\t// Reset our positions when touch ends\r\n\t\t\t\t\tmLastTouchX = -1;\r\n\t\t\t\t\tmLastTouchY = -1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Save our new positions\r\n\t\t\t\t\tmLastTouchX = touch.getX();\r\n\t\t\t\t\tmLastTouchY = touch.getY();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\nEvery _Component_ has a set of life cycle methods that can be overridden to provide component's functionality. In our _CubeController_ we override the _update()_ method. This method is called during every frame of the application's life. Please refer to engine's API documentation for complete list of all methods in _Component_ class.\r\n\r\nTo respond to touch events and move the cube we use two objects from _Application_. These are the _Time_ object, providing time information and the _TouchInput_ object, which provides information about currently running touch events.\r\n\r\n\r\n### Adding another cube\r\nTo make our game little more interesting we will put a second cube into the game to move along the first one. To do this easily we'll just add the second cube as a child object of the first cube.\r\n\r\nIn our _main_scene.xml_ add new _<children></children>_ tag into our _<gameObject>_ tag of our first cube. Now add the following object into the _<children>_ tag:\r\n\r\n\t<gameObject>\r\n\t\t<transform>\r\n\t\t\t<position x=\"1\" y=\"1\" z=\"1\" />\r\n\t\t</transform>\r\n\t\t<components>\r\n\t\t\t<component type=\"mesh\">\r\n\t\t\t\t<params>\r\n\t\t\t\t\t<param name=\"meshPath\">cube</param>\r\n\t\t\t\t</params>\r\n\t\t\t</component>\r\n\t\t</components>\r\n\t</gameObject>\r\n\r\nWe do not need to add another instance of the _CubeController_ component to this object because it is automatically moved by it's parent. It's transformation is only relative to it's parent's transformation.\r\n\r\nBuild and run the project. Your first application is now complete, congratulations!\r\n\r\n\r\n## License\r\n\r\n    Copyright 2016 Jakub Petriska\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}